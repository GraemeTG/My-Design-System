@import url("https://fonts.googleapis.com/css?family=Nunito:400");

:root {
  /* Define colours as colours */
  --green: #00ebc7;
  --red: #ff5470;
  --yellow: #fde24f;
  --black: #1b2d45;
  --darkBlue: #00214d;
  --grey: #bfbfbf;
  --lightGrey: #f2f4f6;
  --white: #ffffff;
  --pink: pink;

  /* Define colours intentions */
  --primary: var(--green);
  --danger: var(--red);
  --background: var(--lightGrey);
  --textColour: var(--black);
  --lineColor: var(--green);
  /*--cancelButton: var(--white);*/

  /* Styles */
  --line: solid 2px var(--lineColor);

  /* Type */
  --headingFont: "Nunito", sans-serif;
  --bodyFont: "Nunito", sans-serif;
  --baseFontSize: 100%;
  --h1: 3.052em;
  --h2: 2.441em;
  --h3: 1.953em;
  --h4: 1.563em;
  --h5: 1.25em;
  --smallText: 0.8em;

  /* Elevation */
  /* x y blur spread */
  --level-1: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
  --level-2: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
    0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --level-3: 0 10px 15px -3px rgba(0, 0, 0, 0.1),
    0 4px 6px -2px rgba(0, 0, 0, 0.05);
  --level-4: 0 20px 25px -5px rgba(0, 0, 0, 0.1),
    0 10px 10px -5px rgba(0, 0, 0, 0.04);

  --med: 400px;
}

/* FROM TYPE-SCALE.COM */

html {
  font-size: var(--baseFontSize);
} /*18px*/

body {
  font-family: var(--bodyFont);
  font-weight: 400;
  padding-bottom: 300px;
  background: var(--background);
  color: var(--textColour);
}

header {
  --headerBackground: var(--darkBlue);
  color: white;
  height: 3rem;
  background: var(--headerBackground);
  box-shadow: var(--level-2);
}

p {
  margin: 1rem;
  max-width: 50em;
}

p a blockquote {
  color: var(--darkBlue);
  text-decoration: none;
  border-bottom: solid 3px var(--red);
}

h1,
h2,
h3,
h4,
h5 {
  margin: 3rem 0 1.38rem;
  font-family: var(--headingFont);
  font-weight: 400;
  line-height: 1.3;
}

h1 {
  margin-top: 0;
  font-size: var(--h1);
}

h2 {
  font-size: var(--h2);
}

h3 {
  font-size: var(--h3);
}

h4 {
  font-size: var(--h4);
}

h5 {
  font-size: var(--h5);
}

small,
.text_small {
  font-size: var(--smallText);
}
/*  END TYPESCALE */

.dark {
  --background: var(--black);
  --textColour: var(--lightGrey);
}

blockquote {
  border: solid 0.2px var(--darkBlue);
  margin: 10px;
  padding: 2em;
  background-color: var(--white);
  box-shadow: var(--level-4);
  border-radius: 30%;
  max-width: 50em;
}

/*blockquote a {
  color: var(--black);
  text-decoration: none;
  border-bottom: solid 2px var(--yellow);
}*/

label {
  display: block;
  font-size: var(--smallText);
}

input,
textarea {
  padding: 10px 10px;
  border: var(--line);
  border-radius: 8px;
}

textarea {
  width: 100%;
  height: 5rem;
}

::placeholder {
  color: var(--grey);
}

select {
  border: var(--line);
}

hr {
  border-top: var(--line);
}

/* Buttons */
button {
  --buttonColour: var(--primary);
  appearance: none;
  color: var(--textColour);
  background-color: var(--buttonColour);
  border: none;
  border-radius: 8px;
  padding: 5px 30px;
  box-shadow: var(--level-1);
  transition: 0.3s ease-in-out box-shadow;
}

button:hover {
  box-shadow: var(--level-2);
}

button[disabled] {
  opacity: 0.4;
}

button.cancel {
  --buttonColour: var(--danger);
  --textColour: white;
}

button.small {
  font-size: var(--smallText);
}

/* ELEMENTS AND LAYOUTS */
.layout {
  margin: 0 auto;
  width: 95%;
}

/* Generic Grid creates 2 equal columns */
.grid {
  --gridCols: 2;
  display: block;
  grid-template-columns: repeat(var(--gridCols), 1fr);
}

.cols-3 {
  --gridCols: 3;
  background-color: aqua;
}
.cols-4 {
  --gridCols: 4;
  background-color: var(--red);
}

/* Generic Flex */
.flex {
  --justifyContent: space-between;
  display: block;
  justify-content: var(--justifyContent);
}

/* Tweaked Flex */
.flex-around {
  --justifyContent: space-around;
}

/* MEDIA QUERIES - at bottom because of specificity */
@media only screen and (min-width: 600px) {
  :root {
    --baseFontSize: 112.5%;
  }
  .grid {
    display: grid;
  }
  .flex {
    display: flex;
  }
}

.fake-logo {
  font-size: var(--baseFontSize);
  margin: 0;
}

/* SPECIFICITY */
/* LEAST TO MOST */
/* 1) h1, div */
/* 2) class, attribute, [type="input"] */
/* 3) IDs */
/* !important - don't ever use */

/* EXAMPLE 1 */
/* More specific based on load order */
/* h1 {
  font-size: 1rem;
}
/* This one will apply */
/*h1 {
    font-size: 2rem;
}
}*/

/* EXAMPLE 2 */
/* This one will apply even though not last in order because a class is more specific selector than an h1 */
/*.header {
  font-size: 1rem;
}

h1 {
  font-size: 1rem;
}*/

/* WHICH ONE HERE WOULD APPLY? */
/* THis one will apply becasue it's 3 levels of specificity - 3 levels deep */
/*.wrapper .container .header {
  font-size: 2rem;
}

.header {
  font-size: 1rem;
}*/

/*h1 {
  --black: blue;
  color: var(--black);
}
*/
